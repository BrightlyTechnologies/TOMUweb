#!/usr/bin/python

# sudo pip install pyusb==1.0.0b2
#
# Slow on OS X? See https://github.com/libusb/libusb/issues/108

from sys import argv
import binascii
import struct
import sys
import usb.core
import usb.util

VIDPIDPAIRS = {
    "Objective Development Shared": (0x16c0, 0x05dc),
    "Reilly's Hacked Arduino": (0x2341, 0x8036),
    "WebLight": (0x1209, 0xa800),
}

if len(argv) < 3:
    print 'usage: %s <vid in hex> <pid in hex>' % argv[0]
    print '\nCommon VID/PID pairs:\n'

    for k, v in VIDPIDPAIRS.iteritems():
        print "%40s: %x %04x" % (k, v[0], v[1])

    sys.exit(1)

VENDOR = int(argv[1], 16)
PRODUCT = int(argv[2], 16)

dev = usb.core.find(idVendor=VENDOR, idProduct=PRODUCT)
if dev is None:
    raise ValueError("Did not find device with VID/PID 0x%x/0x%04x" % (
        VENDOR, PRODUCT))

print dev

# bmRequestType
# USBRQ_DIR_HOST_TO_DEVICE | USBRQ_TYPE_VENDOR | USBRQ_RCPT_DEVICE = 0x40
# USBRQ_DIR_DEVICE_TO_HOST | USBRQ_TYPE_VENDOR | USBRQ_RCPT_DEVICE = 0xC0
# USBRQ_DIR_DEVICE_TO_HOST | USBRQ_TYPE_STANDARD | USBRQ_RCPT_DEVICE = 0x80

# bRequest = whatever you specified for your custom request
# wValue
# wIndex
# (optional) data

if False:
    # Device descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0100, 0, 64)
    print "Device", len(result), binascii.hexlify(result)

    # Manufacturer String Descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0301, 0, 64)
    print "Manufacturer", len(result), binascii.hexlify(result)

    # Product String Descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0302, 0, 64)
    print "Product", len(result), binascii.hexlify(result)

    # Serial String Descriptor
    result = dev.ctrl_transfer(0x80, 6, 0x0303, 0, 64)
    print "Serial", len(result), binascii.hexlify(result)

def PrintDivider():
    print "\n=====\n"

# BOS
result = dev.ctrl_transfer(0x80, 6, 0x0f00, 0, 64)
PrintDivider()
print "BOS", len(result), binascii.hexlify(result)

bosParts = \
  struct.unpack('BBHB', result[0:5])
bosLabels = ["Descriptor length", "Descriptor type",
             "Total length", "Device caps count"]
tIndex = 0
for i in bosLabels:
    print "%40s: %d" % (i, bosParts[tIndex])
    tIndex += 1

# https://reillyeon.github.io/webusb/#webusb-platform-capability-descriptor
# Must be set to 23
desc_len = result[5]
if desc_len != 23:
    print "Whoops, no WebUSB descriptor in BOS"
    sys.exit(1)

next_desc = result[5:5+desc_len]
bosParts = struct.unpack('BBBB16BHB', next_desc)

# last byte is bVendorCode
bVendorCode = bosParts[-1]
print "%40s: %d" % ("WebUSB bVendorCode", bVendorCode)

# MS_OS
next_desc = result[5+desc_len:5+desc_len+28]
bosParts = struct.unpack('BBBB16BBBBBHBB', next_desc)

# second-to-last byte is bVendorCode
bMSVendorCode = bosParts[-2]
print "%40s: %d" % ("WinUSB bVendorCode", bMSVendorCode)

WEBUSB_REQUEST_GET_ALLOWED_ORIGINS = 1
WEBUSB_REQUEST_GET_LANDING_PAGE = 2

PrintDivider()

result = dev.ctrl_transfer(0xC0, bVendorCode, 0,
    WEBUSB_REQUEST_GET_LANDING_PAGE, 253)
print "GET_LANDING_PAGE", len(result), binascii.hexlify(result)
landing_array = result[2:]

print "WebUSB landing page: %s" % (landing_array.tostring())

PrintDivider()

result = dev.ctrl_transfer(0xC0, bVendorCode, 0,
    WEBUSB_REQUEST_GET_ALLOWED_ORIGINS, 253)
print "GET_ALLOWED_ORIGINS", len(result), binascii.hexlify(result)
origin_descriptor = result
if origin_descriptor[0] != 4:
    print "GET_ALLOWED_ORIGINS bLength must be 4."
    sys.exit(1)

def ParseOriginsDescriptorSet(s):
    while len(s) > 0:
        if s[1] != 3:
            print "bDescriptorType must be WEBUSB_URL (3)."
            sys.exit(1)
        url = s[2:s[0]]
        print "WebUSB URL:", url.tostring()
        s = s[s[0]:]

origin_descriptor_set_length = (origin_descriptor[2] +
                                (origin_descriptor[3] << 8))
ParseOriginsDescriptorSet(
    origin_descriptor[4:4+origin_descriptor_set_length])

PrintDivider()

WINUSB_REQUEST_MS_OS_20_DESCRIPTOR = 7
result = dev.ctrl_transfer(0xC0, bMSVendorCode, 0,
    WINUSB_REQUEST_MS_OS_20_DESCRIPTOR, 253)
print "MS_OS_20_DESCRIPTOR", len(result), binascii.hexlify(result)

PrintDivider()
